/**
 * @file worker.js
 * @description This script runs in a Web Worker. It's a secure sandbox
 * for executing data analysis code generated by the LLM.
 * It communicates with the main thread via postMessage.
 */

/**
 * @file worker.js
 * @description This script runs in a Web Worker. It's a secure sandbox
 * for executing DATA PROCESSING code generated by the LLM using Danfo.js.
 * It does NOT handle plotting.
 */

// Using importScripts to load Danfo.js from the local public directory.
self.importScripts('/libs/danfo.js');

self.onmessage = async function(event) {
    const { code, data } = event.data;
    console.log("Worker received data processing code to execute.");

    try {
        // danfo is now available as a global object in the worker's scope (self.df)
        const danfo = self.df;

        // Create a function from the code string.
        // We only pass 'danfo' and 'data'. Plotting is handled on the main thread.
        const func = new Function('danfo', 'data', `return (async () => { ${code} })();`);
        
        // Execute the function
        const executionResult = await func(danfo, data);

        const result = {
            success: true,
            data: executionResult,
            error: null
        };

        self.postMessage(result);

    } catch (error) {
        console.error("Error executing code in worker:", error);
        self.postMessage({
            success: false,
            data: null,
            error: error.message
        });
    }
};
