/**
 * @file worker.js
 * @description This script runs in a Web Worker. It's a secure sandbox
 * for executing data analysis code generated by the LLM.
 * It communicates with the main thread via postMessage.
 */

/**
 * @file worker.js
 * @description This script runs in a Web Worker. It's a secure sandbox
 * for executing DATA PROCESSING code generated by the LLM using Danfo.js.
 * It does NOT handle plotting.
 */

import * as df from 'danfojs';

self.onmessage = async function(event) {
    const { code, data } = event.data;
    console.log("WORKER: Received message.", { code });

    try {
        // We pass the imported 'danfojs' library (as 'df') into the sandboxed function.
        // The function expects a parameter named 'danfo', so we pass 'df' to it.
        // This ensures the code generated by the LLM, which uses 'danfo', works correctly.
        const func = new Function('danfo', 'data', `return (async () => { ${code} })();`);
        
        // Execute the function, passing the imported 'df' module as the 'danfo' parameter.
        const executionResult = await func(df, data);

        const result = {
            success: true,
            data: executionResult,
            error: null
        };
        
        console.log("WORKER: Code execution successful. Posting result to main thread.", result);
        self.postMessage(result);

    } catch (error) {
        console.error("WORKER: Error executing code.", error);
        self.postMessage({
            success: false,
            data: null,
            error: error.message
        });
    }
};
